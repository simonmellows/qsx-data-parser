/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc. (Edited by CF)
Programmer: MFS (Edited by SCM)
Comments:
	- Comments marked *CF are where edits are located
*/


/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Lutron HomeWorks QSX Button Control v1.2 (CF v1.0)"

#DEFINE_CONSTANT MAX_BTN 50
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0

#CATEGORY "0" 

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DIGITAL_EXPAND InputsWithParams

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "Lutron.Leap.CommLib"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// *CF - Added 'Init' digital input to trigger initialation of module (as opposed to within main function)
DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_, Init, _SKIP_;
DIGITAL_INPUT Button[MAX_BTN], _SKIP_;
// *CF - Added String version of Href
STRING_INPUT Button_Href_ID$[MAX_BTN,MAX_BTN][255]; 

DIGITAL_OUTPUT  _SKIP_, _SKIP_, _SKIP_;
DIGITAL_OUTPUT Is_Initialized;
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT Press[MAX_BTN];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

INTEGER_PARAMETER Command_Processor_ID, Mode, MultiTap_Interval, _SKIP_, _SKIP_;
// *CF - Commented out parameter as replaced by string version
//LONG_INTEGER_PARAMETER Button_Href_ID[MAX_BTN];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
// *CF - Commented out parameter properties
/*#BEGIN_PARAMETER_PROPERTIES Button_Href_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES*/
                             
#BEGIN_PARAMETER_PROPERTIES MultiTap_Interval
   propValidUnits = unitTime;
   propDefaultUnit = unitTime;
   propDefaultValue = 0.5s;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Mode
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 2d;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
ButtonComponent component;
// *CF - Created long integer to store converted string href
Long_Integer Button_Href_ID[MAX_BTN];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnInitializationChange(ButtonComponent sender, InitializationEventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnButtonEventChange(ButtonComponent sender, ButtonFeedbackEventArgs args)
{
	INTEGER btn;

	for (btn = 1 to MAX_BTN)
	{
		IF (args.Id = Button_Href_ID[btn])
			Press[btn] = !(args.Payload = ButtonEventFeedback.Unknown || args.Payload = ButtonEventFeedback.Release);
    }
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Button
{
	component.Press(Button_Href_ID[GetLastModifiedArrayIndex()]);
}
RELEASE Button
{
	component.Release(Button_Href_ID[GetLastModifiedArrayIndex()]);
}

// *CF - Added function to initialize module as opposed to initialize
PUSH Init
{
	INTEGER button;

	RegisterEvent(component, OnInitializationChange, OnInitializationChange);
	RegisterEvent(component, OnButtonEventChange, OnButtonEventChange);

	component.Configure(Command_Processor_ID, Mode, 0);

	for (button = 1 to MAX_BTN){
		// *CF - Convert string Href to long integer
		Button_Href_ID[button] = Atol(Button_Href_ID$[button]);
		
		component.AddButton(Button_Href_ID[button]);
	};
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
// *CF - Moved contents of Main function to Init event (triggered by digital input 'Init')
Function Main()
{
	//INTEGER button;

	WaitForInitializationComplete();

	/*RegisterEvent(component, OnInitializationChange, OnInitializationChange);
	RegisterEvent(component, OnButtonEventChange, OnButtonEventChange);

	component.Configure(Command_Processor_ID, Mode, 0);

	for (button = 1 to MAX_BTN)
		component.AddButton(Button_Href_ID[button]);*/
}

