/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc. (Edited by CF)
Programmer: MFS (Edited by SCM)
Comments:
	- Comments marked *CF are where edits are located
*/
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Lutron HomeWorks QSX LED Control v1.2 (CF v1.0)"

#DEFINE_CONSTANT MAX_LED 50

#CATEGORY "0" 

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#ANALOG_SERIAL_EXPAND OutputsWithParams

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "Lutron.Leap.CommLib"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT Is_Initialized;
                      
ANALOG_OUTPUT _SKIP_; 
ANALOG_OUTPUT LED_State[MAX_LED];

// *CF - Added 'Init' digital input to trigger initialation of module (as opposed to within main function)
DIGITAL_INPUT _SKIP_, Init, _SKIP_;
ANALOG_INPUT LED_Input[MAX_LED],_SKIP_;
// *CF - Added String version of Href
STRING_INPUT LED_Href_ID$[MAX_LED,MAX_LED][255]; 


/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Command_Processor_ID, _SKIP_, _SKIP_;
// *CF - Commented out parameter as replaced by string version
//LONG_INTEGER_PARAMETER LED_Href_ID[MAX_LED];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
// *CF - Commented out parameter properties
/*#BEGIN_PARAMETER_PROPERTIES LED_Href_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES*/

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
LEDComponent component;

// *CF - Created long integer to store converted string href
Long_Integer LED_Href_ID[MAX_LED];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnInitializationChange(LEDComponent sender, InitializationEventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnLEDStatusChange(LEDComponent sender, LEDStatusEventArgs args)
{
	INTEGER led;

	for (led = 1 to MAX_LED)
	{
		IF (args.Payload.Id = LED_Href_ID[led])
			LED_State[led] = args.Payload.Status;
    }
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
THREADSAFE CHANGE LED_Input
{
	INTEGER led;

	led = GetLastModifiedArrayIndex();

	component.SetLEDControl(LED_Href_ID[led], LED_Input[led]);
}

// *CF - Added function to initialize module as opposed to initialize
PUSH Init
{
	INTEGER led;
                                                                
	RegisterEvent(component, OnInitializationChange, OnInitializationChange);
	RegisterEvent(component, OnLEDStatusChange, OnLEDStatusChange);

	component.Configure(Command_Processor_ID);

	for (led = 1 to MAX_LED){
		// *CF - Convert string Href to long integer
		LED_Href_ID[led] = Atol(LED_Href_ID$[led]);		
	
		component.AddLEDStatus(LED_Href_ID[led]);
	}	
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
// *CF - Moved contents of Main function to Init event (triggered by digital input 'Init')

Function Main()
{
	//INTEGER led;

	WaitForInitializationComplete();
                                                                
	/*RegisterEvent(component, OnInitializationChange, OnInitializationChange);
	RegisterEvent(component, OnLEDStatusChange, OnLEDStatusChange);

	component.Configure(Command_Processor_ID);

	for (led = 1 to MAX_LED)
		component.AddLEDStatus(LED_Href_ID[led]);*/
}

