/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
Programmer: MFS
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Lutron HomeWorks QSX Shade Group Control v1.2"


#CATEGORY "0" 


#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DIGITAL_EXPAND InputsWithParams

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "Lutron.Leap.CommLib"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, _SKIP_,_SKIP_;
DIGITAL_INPUT Lift_Raise, Lift_Lower; 
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT Tilt_Raise, Tilt_Lower;
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT Set_Lift_Level, Set_Tilt_Level;

ANALOG_INPUT  _SKIP_;
ANALOG_INPUT Lift_Level, Tilt_Level;

DIGITAL_OUTPUT _SKIP_, _SKIP_,_SKIP_;
DIGITAL_OUTPUT Is_Initialized;

ANALOG_OUTPUT _SKIP_, _SKIP_,_SKIP_, _SKIP_,  _SKIP_, _SKIP_, _SKIP_, _SKIP_;
ANALOG_OUTPUT Lift_Level_Fb, Tilt_Level_Fb;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER Command_Processor_ID, Shade_Mode;
LONG_INTEGER_PARAMETER Zone_Href_ID;
/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES Zone_Href_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Shade_Mode
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d, 3d;
   propDefaultValue = 1d;
   //propList = {1d,"Lift"},{2d,"LiftAndTilt"};
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
ShadeComponent component;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnInitializationChange(ShadeComponent sender, InitializationEventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnLiftLevelChange(ShadeComponent sender, DimLevelEventArgs args)
{
	Lift_Level_Fb = args.Payload;
}
          
EVENTHANDLER OnTiltLevelChange(ShadeComponent sender, DimLevelEventArgs args)
{
	Tilt_Level_Fb = args.Payload;
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Lift_Raise
{
	component.RaiseLift();
}

PUSH Lift_Lower
{
	component.LowerLift();
}

RELEASE Lift_Raise, Lift_Lower
{
	component.StopLift();
}
          
PUSH Tilt_Raise
{
	component.RaiseTilt();
}

PUSH Tilt_Lower
{
	component.LowerTilt();
}

RELEASE Tilt_Raise, Tilt_Lower
{
	component.StopTilt();
}

RELEASE Set_Lift_Level
{
	IF (Lift_Level != Lift_Level_Fb)
	{
		component.SetLiftLevel(Lift_Level);
	}
}

THREADSAFE CHANGE Lift_Level
{
 	IF (Set_Lift_Level)
	{
		component.SetLiftLevel(Lift_Level);		
		DELAY(10);
	}
}

RELEASE Set_Tilt_Level
{
	IF (Tilt_Level != Tilt_Level_Fb)
	{
		component.SetTiltLevel(Tilt_Level);
	}
}

THREADSAFE CHANGE Tilt_Level
{
 	IF (Set_Tilt_Level)
	{
		component.SetTiltLevel(Tilt_Level);		
		DELAY(10);
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	WaitForInitializationComplete();

	RegisterEvent(component, OnInitializationChange, OnInitializationChange);
	RegisterEvent(component, OnLiftLevelChange, OnLiftLevelChange);
	RegisterEvent(component, OnTiltLevelChange, OnTiltLevelChange);

	component.Configure(Command_Processor_ID, Shade_Mode, Zone_Href_ID);
}

