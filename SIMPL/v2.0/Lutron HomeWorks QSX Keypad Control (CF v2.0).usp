/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Lutron HomeWorks QSX Keypad Control v1.3 (CF v2.0)"

#DEFINE_CONSTANT MAX_BTN 50
#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0

#CATEGORY "1" //Hidden

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#DIGITAL_EXPAND InputsWithParams

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "Lutron.Leap.CommLib"

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT _SKIP_, _SKIP_, Init, _SKIP_;
DIGITAL_INPUT Button_Press[MAX_BTN];
// *CF - Added String version of Href
STRING_INPUT _SKIP_, Keypad_Href_ID$[255];

DIGITAL_OUTPUT  _SKIP_, _SKIP_;
DIGITAL_OUTPUT Is_Initialized;
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT Button_Enabled[MAX_BTN];

ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT Button_Led_Status[MAX_BTN];

STRING_OUTPUT _SKIP_;
STRING_OUTPUT Button_Label[MAX_BTN];

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

INTEGER_PARAMETER Command_Processor_ID;
// *CF - Commented out parameter as replaced by string version
//LONG_INTEGER_PARAMETER Keypad_Href_ID;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
                             
#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES
 
// *CF - Commented out parameter properties
/*#BEGIN_PARAMETER_PROPERTIES Keypad_Href_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 0d;
#END_PARAMETER_PROPERTIES*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
KeypadComponent component;
 
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
EVENTHANDLER OnInitializationChange(KeypadComponent sender, InitializationEventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnKeypadButtonLabelChange(KeypadComponent sender, KeypadLabelEventArgs args)
{
	Button_Label[args.Id] = args.Payload;
}

EVENTHANDLER OnKeypadButtonFeedbackChange(KeypadComponent sender, KeypadButtonEventArgs args)
{
	Button_Led_Status[args.Id] = args.Payload;
}
 
EVENTHANDLER OnKeypadButtonEnableChange(KeypadComponent sender, KeypadButtonEventArgs args)
{
	Button_Enabled[args.Id] = args.Payload;
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
PUSH Button_Press
{
	component.ButtonPress(GetLastModifiedArrayIndex());
}
RELEASE Button_Press
{
	component.ButtonRelease(GetLastModifiedArrayIndex());
}

// *CF - Added function to initialize module as opposed to Main()
PUSH Init
{
 	RegisterEvent(component, OnInitializationChange, OnInitializationChange);
	RegisterEvent(component, OnKeypadButtonLabelChange, OnKeypadButtonLabelChange);
	RegisterEvent(component, OnKeypadButtonFeedbackChange, OnKeypadButtonFeedbackChange);
	RegisterEvent(component, OnKeypadButtonEnableChange, OnKeypadButtonEnableChange);
    
    // *CF - Convert string Href to long integer
	component.Configure(Command_Processor_ID, Atol(Keypad_Href_ID$));

}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
// *CF - Moved contents of Main function to Init event (triggered by digital input 'Init')
Function Main()
{

	WaitForInitializationComplete();
    /*
	RegisterEvent(component, OnInitializationChange, OnInitializationChange);
	RegisterEvent(component, OnKeypadButtonLabelChange, OnKeypadButtonLabelChange);
	RegisterEvent(component, OnKeypadButtonFeedbackChange, OnKeypadButtonFeedbackChange);
	RegisterEvent(component, OnKeypadButtonEnableChange, OnKeypadButtonEnableChange);

	component.Configure(Command_Processor_ID, Keypad_Href_ID);*/

}

