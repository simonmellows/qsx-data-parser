/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Control Concepts, Inc.
Comments: support@controlconcepts.net
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "Lutron HomeWorks QSX Command Processor v1.3"


#CATEGORY "0" 

#DEFINE_CONSTANT TRUE 1
#DEFINE_CONSTANT FALSE 0

#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
#USER_SIMPLSHARP_LIBRARY "Lutron.Leap.CommLib"


/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_; 
DIGITAL_INPUT Connect, Disconnect, Debug;

STRING_INPUT IP_Address[100];

DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_;
DIGITAL_OUTPUT Is_Communicating, Is_Initialized;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

INTEGER_PARAMETER Command_Processor_ID;
STRING_PARAMETER IPAddress[100], Username[100], Password[100];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES Command_Processor_ID
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 10d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES IPAddress
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "0.0.0.0";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Username
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "admin";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Password
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
CommandProcessor processor;
INTEGER Ready;
/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
PUSH Connect
{
	IF (Ready)
		processor.Connect();
}

PUSH Disconnect
{
	IF (Ready)
		processor.Disconnect();
}
             
CHANGE IP_Address
{
	processor.IPAddress = IP_Address;
}
                
/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
EVENTHANDLER OnCommunicationChange(CommandProcessor sender, CommunicatingEventArgs args)
{
	Is_Communicating = args.Payload;
}

EVENTHANDLER OnInitializationChange(CommandProcessor sender, InitializationEventArgs args)
{
	Is_Initialized = args.Payload;
}

EVENTHANDLER OnDebugMessage(CommandProcessor sender, DebugEventArgs args)
{
	IF (Debug)
		trace("%s\r", args.Payload);
}
                                    
EVENTHANDLER OnReadyState(CommandProcessor sender, EventArgs args)
{
	Ready = TRUE;

	IF (Connect)
		processor.Connect();
}



/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	String IP[100];

	WaitForInitializationComplete();

	RegisterEvent(processor, OnInitializationChange, OnInitializationChange);
	RegisterEvent(processor, OnCommunicationChange, OnCommunicationChange);
	RegisterEvent(processor, OnDebugMessage, OnDebugMessage);
	RegisterEvent(processor, OnReadyState, OnReadyState);

	IP = processor.IPAddress;

	IF (LEN(IP) <= 0)
		IP = IPAddress;

	processor.Configure(Command_Processor_ID, IP, Username, Password);		
}

